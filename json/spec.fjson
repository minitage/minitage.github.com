{"body": "<div class=\"section\" id=\"specifications\">\n<h1>Specifications<a class=\"headerlink\" href=\"#specifications\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"section\" id=\"the-package-manager-in-7-points\">\n<h2>The package manager in 7 points<a class=\"headerlink\" href=\"#the-package-manager-in-7-points\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<ul>\n<li><p class=\"first\">Be simple !</p>\n</li>\n<li><p class=\"first\">Run on popular Unixes, including FreeBSD, Linux and MacOSX. And in a second time, why not port him to other OSs.</p>\n</li>\n<li><p class=\"first\">Have a simple and robust dependency system.</p>\n</li>\n<li><p class=\"first\">Integrates other build systems</p>\n</li>\n<li><p class=\"first\">Fetch from several methods: main are svn, http, ftp, Mercurial, Git and Bzr</p>\n</li>\n<li><p class=\"first\">Provide some system which allow us search for packages in alternate locations.</p>\n</li>\n<li><p class=\"first\">Install each part independently to the others. Follow the http rule (DO NOT SHARE):</p>\n<div class=\"highlight-python\"><pre>Independently is not a synonym of not using another dependency.\nIt s just to say that you can not install in the same /dependencies/foo for 2 different dependencies at the same time.\nYou must install each dependency separatly from the others and then reference in other packages.\nBe warned that there is not sandbox mecanism for checks and it is not goiong to appear, minitage must be simple.</pre>\n</div>\n</li>\n</ul>\n</blockquote>\n</div>\n<div class=\"section\" id=\"the-minilays\">\n<h2>The minilays<a class=\"headerlink\" href=\"#the-minilays\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"abstract\">\n<h3>Abstract<a class=\"headerlink\" href=\"#abstract\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<blockquote>\n<ul class=\"simple\">\n<li>A minilay is a directory containing minibuilds.</li>\n<li>The name come from gentoo overlays system. See <a class=\"reference external\" href=\"http://www.gentoo.org/proj/en/overlays/userguide.xml\">http://www.gentoo.org/proj/en/overlays/userguide.xml</a></li>\n</ul>\n</blockquote>\n</div>\n<div class=\"section\" id=\"overlaping-minilays\">\n<h3>Overlaping minilays<a class=\"headerlink\" href=\"#overlaping-minilays\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<blockquote>\n<ul>\n<li><p class=\"first\">Minilays are parsed during the dependencies calculation done by minimerge.\nminimerge searches for minibuilds in all its minilays, in alphabetical order.</p>\n</li>\n<li><p class=\"first\">That &#8216;s why when you do that:</p>\n<div class=\"highlight-python\"><pre>minilays/\n    a_override_dependencies/\n        minibuild1\n    dependencies/\n        minibuild1</pre>\n</div>\n</li>\n<li><p class=\"first\">And try to:</p>\n<div class=\"highlight-python\"><pre>minimerge minibuild1</pre>\n</div>\n</li>\n</ul>\n</blockquote>\n<p>minimerge will install <tt class=\"docutils literal\"><span class=\"pre\">a_override_dependencies/minibuild1</span></tt> instead of <tt class=\"docutils literal\"><span class=\"pre\">dependencies/minibuild1</span></tt>.</p>\n<p>This mechanism is very useful to override things for special needs !</p>\n</div>\n<div class=\"section\" id=\"specifying-alternate-minilays-to-minimerge\">\n<h3>Specifying alternate minilays to minimerge<a class=\"headerlink\" href=\"#specifying-alternate-minilays-to-minimerge\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<blockquote>\n<ul>\n<li><p class=\"first\">You can give minilays to minimerge by placing them in:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">minitage</span><span class=\"o\">/</span><span class=\"n\">minilays</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">You can put paths in the MINILAYS environment variable (space separated paths), but be aware, they are read first in the dependencies calculation!:</p>\n<div class=\"highlight-python\"><pre>export MINILAYS=\"path1 path2\"</pre>\n</div>\n</li>\n</ul>\n</blockquote>\n</div>\n</div>\n<div class=\"section\" id=\"the-minibuilds\">\n<h2>The minibuilds<a class=\"headerlink\" href=\"#the-minibuilds\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"id1\">\n<h3>Abstract<a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<blockquote>\n<ul>\n<li><p class=\"first\">They are the minitage packages.</p>\n</li>\n<li><p class=\"first\">A minibuild is similar to a gentoo ebuild  (i recommend you to read <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Ebuild\">http://en.wikipedia.org/wiki/Ebuild</a>) or a FreeBSD Port Makefile (<a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Ports_collection\">http://en.wikipedia.org/wiki/Ports_collection</a>)  or a macport.</p>\n</li>\n<li><p class=\"first\">The forms is a &#8216;Config.ini&#8217; like file.</p>\n</li>\n<li><dl class=\"first docutils\">\n<dt>In a short, it is just a metadata file which contains all the necessary to describe the install process of a dependency:</dt>\n<dd><ul class=\"first last\">\n<li><p class=\"first\">Dependencies for the package ? ( eg: python-2.4 )</p>\n</li>\n<li><p class=\"first\">Where to get it ? ( the url )</p>\n</li>\n<li><p class=\"first\">How fetch it ? (svn, git, hg, http, ftp)</p>\n</li>\n<li><p class=\"first\">How will it be installed ? ( buildout )</p>\n</li>\n<li><p class=\"first\">Metadatas:</p>\n<blockquote>\n<ul class=\"simple\">\n<li>License</li>\n<li>Project homepage</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</blockquote>\n</div>\n<div class=\"section\" id=\"writing-minibuilds\">\n<h3>Writing Minibuilds<a class=\"headerlink\" href=\"#writing-minibuilds\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<blockquote>\n<ul>\n<li><p class=\"first\">A minibuild is a config.ini file  which is read by minimerge and has a bunch of metadata :</p>\n<blockquote>\n<ul>\n<li><p class=\"first\">a src_uri variable: where to fetch the package if not present on the file system</p>\n</li>\n<li><p class=\"first\">a src_type variable: how to fetch it.\nAvailable fetch methods are:</p>\n<blockquote>\n<ul class=\"simple\">\n<li>svn</li>\n<li>hg</li>\n<li>bzr</li>\n<li>git</li>\n<li>static (for http, file, local and ftp)</li>\n</ul>\n</blockquote>\n</li>\n<li><p class=\"first\">a dependencies variable: list of other minibuilds which this one depends on</p>\n</li>\n<li><p class=\"first\">a install_method variable : how to install it</p>\n<p>Available install methods are:</p>\n<blockquote>\n<ul class=\"simple\">\n<li>buildout (use the <a class=\"reference internal\" href=\"#buildout-maker\"><em>buildout maker</em></a>)</li>\n</ul>\n</blockquote>\n</li>\n<li><p class=\"first\">a category variable : controls the category of the minibuilds. [[br]]\nCategories are top level  directories in your minitage directory. [[br]]\nPossible categories may be:</p>\n<blockquote>\n<ul class=\"simple\">\n<li>dependencies</li>\n<li>eggs</li>\n<li>misc</li>\n<li>django</li>\n<li>tg</li>\n<li>pylons</li>\n<li>zope</li>\n</ul>\n</blockquote>\n</li>\n<li><p class=\"first\">You can use of course your own categories but be aware to name them\nwith only letters and digits.</p>\n</li>\n<li><p class=\"first\">minitage installs a minibuild called MINIBUILDNAME to your minitage/CATEGORY/MINIBUILDNAME.</p>\n</li>\n<li><p class=\"first\">The steps ran are:</p>\n<blockquote>\n<ul>\n<li><p class=\"first\">Fetch:</p>\n<blockquote>\n<ul class=\"simple\">\n<li>in online mode only: Try to fetch the src_uri to minitage/CATEGORY/MINIBUILDNAME</li>\n<li>in offline mode: The files must be present !</li>\n</ul>\n</blockquote>\n</li>\n<li><p class=\"first\">Run the install method</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<p>Exemple : the minibuilds/cyrus-sasl-2.1 minibuild:</p>\n<div class=\"highlight-python\"><pre>[minibuild]\n# depends on the freetype-2.1 minibuild\ndependencies=freetype-2.1\n# must be fetched from svn\nsrc_type=svn\n# where it is !\nsrc_uri=https://subversion.makina-corpus.net/zopina/buildouts/buildout-meta/trunk/lib/cyrus-sasl-2.1.22/\n# this is a \"buildout\" minibuild which will install itself via buildout\ninstall_method=\"buildout\"\n# will be installed in minitage/dependencies/packagename\ncategory=dependencies\nhomepage=http://chuknorris.is.a.good/guy\nlicense=GPL</pre>\n</div>\n<p>You must place your minibuild in a minilay.</p>\n</div>\n<div class=\"section\" id=\"conventions\">\n<h3>Conventions<a class=\"headerlink\" href=\"#conventions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>They are rules, not just conventions, follow them or be killed.\nIf you want a full review, just take a look to <tt class=\"docutils literal\"><span class=\"pre\">minitage.core/minitage/core/objects/minibuild.py`</span></tt> regular expressions ;).\nPlease not that your project name cannot contain &#8220;<tt class=\"docutils literal\"><span class=\"pre\">-</span></tt>&#8221; as it is used to generate eggs names.</p>\n<blockquote>\n<ul>\n<li><p class=\"first\">Valid names:</p>\n<blockquote>\n<ul class=\"simple\">\n<li>meta-toto</li>\n<li>double-toto</li>\n<li>toto</li>\n<li>test-1.0</li>\n<li>test-test-1.0</li>\n<li>test-1.0.3</li>\n<li>test-1.0_beta444</li>\n<li>test-1.0_py2.4</li>\n<li>test-1.0_py2.5</li>\n<li>test-1.0_beta444_pre20071024</li>\n<li>test-1.0_alpha44</li>\n<li>test-1.0_alpha44_pre20071024</li>\n<li>test-1.0_pre20071024</li>\n<li>test-1.0_branchBRANCHNAME</li>\n<li>test-1.0_branchHEADDIGIT</li>\n<li>test-1.0_tagHEADDIGIT</li>\n<li>test-1.0_r1</li>\n<li>test-1.0_rHEAD</li>\n<li>test-1.0_rTIP</li>\n</ul>\n</blockquote>\n</li>\n<li><p class=\"first\">Please set the version to MAJOR:MINOR without the revision for compiled dependencies !\nThis will prevent from recompiling everything on security updates for example</p>\n</li>\n<li><p class=\"first\">Multiple maker specific metadata</p>\n</li>\n</ul>\n</blockquote>\n</div>\n<div class=\"section\" id=\"the-buildout-maker\">\n<span id=\"buildout-maker\"></span><h3>The buildout maker<a class=\"headerlink\" href=\"#the-buildout-maker\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>It will run a buildout somewhere</p>\n<p>Specific options:</p>\n<blockquote>\n<ul>\n<li><dl class=\"first docutils\">\n<dt>buildout_config:</dt>\n<dd><p class=\"first last\">configuration file  to run</p>\n</dd>\n</dl>\n</li>\n</ul>\n</blockquote>\n</div>\n</div>\n<div class=\"section\" id=\"the-installation-layout\">\n<h2>The installation layout<a class=\"headerlink\" href=\"#the-installation-layout\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"id2\">\n<h3>Abstract<a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"highlight-python\"><pre>etc/\n     minimerge.cfg\nbin/\n    minimerge\n    python\nlib/\n    python-ver/\n        site-packages/\n            minitage.core\n\ndependencies/\n    dep1/\n        buildout.cfg\n        hooks/\n        patches/::\n        parts/\n            part/\n                bin/\n                lib/\n                include/\n\neggs/\n    cache/\n    projectn/\n        buildout.cfg\n        hooks/\n        patches/\n        parts/\n            site-packages-2.4\n            site-packages-2.5\n\ndjango/\n     project1/\n     ...\n     projectn/\nzope/\n     project1/\n     ...\n     projectn/\n\nanotherCategory/\n    anotherProject/\n\nminilays/\n    eggs/\n    dependencies/\n    instances/\n    meta/\n    samples/\n    anExternalMinilay/</pre>\n</div>\n</div>\n<div class=\"section\" id=\"layout-explanation\">\n<h3>Layout explanation<a class=\"headerlink\" href=\"#layout-explanation\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"docutils\">\n<dt><em>bin/minimerge</em>:</dt>\n<dd><ul class=\"first last simple\">\n<li>The project Assembler.</li>\n</ul>\n</dd>\n<dt><em>etc/minimerge.cfg</em>:</dt>\n<dd>Minitage configuration file.</dd>\n<dt><em>dependencies/</em>:</dt>\n<dd><ul class=\"first last\">\n<li><p class=\"first\">Libraries and applications like libpng, python-2.4 or readline.</p>\n</li>\n<li><p class=\"first\">One dependency per directory.</p>\n</li>\n<li><p class=\"first\">The installation prefix for each dependency is:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">dependencies</span><span class=\"o\">/</span><span class=\"n\">dependency</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"o\">/</span><span class=\"n\">parts</span><span class=\"o\">/</span><span class=\"n\">part</span>\n</pre></div>\n</div>\n</li>\n</ul>\n</dd>\n<dt><em>eggs/</em>:</dt>\n<dd><p class=\"first\">They is two possibilities there:</p>\n<ul class=\"last\">\n<li><p class=\"first\">In a particular eggs/directory:</p>\n<blockquote>\n<ul>\n<li><p class=\"first\">Traditional distutilized python modules</p>\n</li>\n<li><p class=\"first\">Python modules shipped is a non pythonish way (like libxml2)</p>\n</li>\n<li><p class=\"first\">They must install a sub site-packages for each python version supported:</p>\n<div class=\"highlight-python\"><pre>eggs/egg/\n    site-packages-2.4/\n        module/__init__.py\n    site-packages-2.5/\n        module/__init__.py\n    site-packages-2.6/\n        module/__init__.py\n    site-packages-3.0/\n        module/__init__.py</pre>\n</div>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><dl class=\"first docutils\">\n<dt>Python eggyfiables modules</dt>\n<dd><ul class=\"first last\">\n<li><dl class=\"first docutils\">\n<dt>They are installed in the &#8220;eggs-cache&#8221;</dt>\n<dd><ul class=\"first last\">\n<li><p class=\"first\">eggs in release mode:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">eggs</span><span class=\"o\">/</span><span class=\"n\">cache</span>\n</pre></div>\n</div>\n</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</dd>\n<dt>django/:</dt>\n<dd><ul class=\"first last simple\">\n<li>Django projects.</li>\n</ul>\n</dd>\n<dt><em>zope/</em>:</dt>\n<dd><ul class=\"first last simple\">\n<li>Zope/Plone projects which only install zope, plone and the needed products.</li>\n<li>Just think to add the needed site-packages in the project&#8217;s extra-path so that buildout can find them!</li>\n<li>Do not use not packaged eggs parts there or BURN IN HELL!</li>\n</ul>\n</dd>\n<dt>misc:/</dt>\n<dd><ul class=\"first last simple\">\n<li>All that cannot be elsewhere</li>\n</ul>\n</dd>\n<dt>tg/:</dt>\n<dd><ul class=\"first last simple\">\n<li>Turbogears project</li>\n</ul>\n</dd>\n<dt><em>minilays/</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><em>dependencies</em> | <em>zope</em> | <em>django</em> | <em>eggs</em></span></dt>\n<dd><p class=\"first\">Those are MINILAYS. Minilays are similar to gentoo &#8216;s OVERLAYS. Or, be reference, to entries in your source.list on Debian/Ubuntu.\nThey contains minibuilds.\nThose are the packages that our package manager deals with.\nYou can add search Directories which are not in <tt class=\"docutils literal\"><span class=\"pre\">minilays/</span></tt> by setting the &#8220;MINILAYS&#8221; environment variable.\nex:</p>\n<div class=\"last highlight-sh\"><div class=\"highlight\"><pre><span class=\"nb\">export </span><span class=\"nv\">MINILAYS</span><span class=\"o\">=</span><span class=\"s2\">&quot;~/otherminibuildsdirectory&quot;</span>\n</pre></div>\n</div>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n", "display_toc": true, "title": "Specifications", "sourcename": "spec.txt", "customsidebar": null, "current_page_name": "spec", "next": {"link": "../installation/", "title": "Installation"}, "rellinks": [["genindex", "General Index", "I", "index"], ["installation", "Installation", "N", "next"], ["about", "About", "P", "previous"]], "meta": {}, "parents": [], "sidebars": ["searchbox.html", "globaltoc.html"], "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Specifications</a><ul>\n<li><a class=\"reference internal\" href=\"#the-package-manager-in-7-points\">The package manager in 7 points</a></li>\n<li><a class=\"reference internal\" href=\"#the-minilays\">The minilays</a><ul>\n<li><a class=\"reference internal\" href=\"#abstract\">Abstract</a></li>\n<li><a class=\"reference internal\" href=\"#overlaping-minilays\">Overlaping minilays</a></li>\n<li><a class=\"reference internal\" href=\"#specifying-alternate-minilays-to-minimerge\">Specifying alternate minilays to minimerge</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#the-minibuilds\">The minibuilds</a><ul>\n<li><a class=\"reference internal\" href=\"#id1\">Abstract</a></li>\n<li><a class=\"reference internal\" href=\"#writing-minibuilds\">Writing Minibuilds</a></li>\n<li><a class=\"reference internal\" href=\"#conventions\">Conventions</a></li>\n<li><a class=\"reference internal\" href=\"#the-buildout-maker\">The buildout maker</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#the-installation-layout\">The installation layout</a><ul>\n<li><a class=\"reference internal\" href=\"#id2\">Abstract</a></li>\n<li><a class=\"reference internal\" href=\"#layout-explanation\">Layout explanation</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../about/", "title": "About"}, "metatags": ""}